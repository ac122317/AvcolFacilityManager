@model PaginatedList<AvcolFacilityManager.Models.Reviews>

@{
    ViewData["Title"] = "Index";
}

<h1>Reviews</h1>

@if (User.Identity.IsAuthenticated)
{
    <p>
        <a class="btn btn-primary" asp-action="Create">Create New</a>
    </p>
}

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            <label>Search by Facility Name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" /></label>
            <input type="submit" value="Search" class="btn btn-outline-primary" /> |
            <a class="btn btn-primary" asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

@if (!Model.Any() && !string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
{
    <div class="alert alert-warning" role="alert">
        No reviews found for facilities named "@ViewData["CurrentFilter"]".
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]">Facility Name</a>
                </th>
                <th>
                    Rating
                </th>
                <th>
                    Comment
                </th>
                <th>
                    Date Created
                </th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model) {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Booking.Facility.FacilityName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Rating)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Comment)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.DateCreated)
                    </td>
                    <td>
                        @if (User.IsInRole("Admin"))
                        {
                            <a class="btn btn-warning" asp-action="Edit" asp-route-id="@item.ReviewId">Edit</a> 
                            <a class="btn btn-info" asp-action="Details" asp-route-id="@item.ReviewId">Details</a> 
                            <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.ReviewId">Delete</a>
                        }
                        else
                        {
                            <a class="btn btn-info" asp-action="Details" asp-route-id="@item.ReviewId">Details</a>
                        }
            </td>
        </tr>
}
    </tbody>
</table>
}
@if (Model.Any())
{
    <!-- Pagination links -->
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";

    <div>
        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex - 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-primary @prevDisabled">
            Previous
        </a>

        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-primary @nextDisabled">
            Next
        </a>
    </div>

    <div>
        Page @Model.PageIndex of @Model.TotalPages
    </div>
}