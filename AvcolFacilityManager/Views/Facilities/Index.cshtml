@using AvcolFacilityManager.Models;
@model PaginatedList<AvcolFacilityManager.Models.Facility>

@{
    ViewData["Title"] = "Index";
}

<h1>Facilities</h1>

@if (User.IsInRole("Admin"))
{
    <p>
        <a class="btn btn-primary" asp-action="Create">Create New</a>
    </p>
}

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            <label>Search by facility name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" /></label>
            <input type="submit" value="Search" class="btn btn-outline-primary" /> |
            <a class="btn btn-primary" asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

@if (!Model.Any() && !string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
{
    <div class="alert alert-warning" role="alert">
        No facilities named "@ViewData["CurrentFilter"]" were found.
    </div>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]">Facility Name</a>
            </th>
            <th>
                Facility Type
            </th>
            <th>
                Capacity
            </th>
            @if (User.IsInRole("Admin"))
            {
            <th>
                Actions
            </th>
            }
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.FacilityName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FacilityType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Capacity)
            </td>
            <td>
                    @if (User.IsInRole("Admin"))
                    {
                <a class="btn btn-warning" asp-action="Edit" asp-route-id="@item.FacilityId">Edit</a> 
                <a class="btn btn-info" asp-action="Details" asp-route-id="@item.FacilityId">Details</a> 
                <a class="btn btn-danger" asp-action="Delete" asp-route-id="@item.FacilityId">Delete</a>
                    }
            </td>
        </tr>
}
    </tbody>
</table>
}

@if (Model.Any())
{
<!--Deciding whether the previous and next buttons should be active-->
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";

<!--Links for the pagination navigation-->
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-primary @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-primary @nextDisabled">
    Next
</a>

<!--Displaying current page number and total pages-->
<div>
    Page @Model.PageIndex of @Model.TotalPages
</div>
}